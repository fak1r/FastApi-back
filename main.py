from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from database import init_db
import os

from utils.limiter import limiter
from slowapi.errors import RateLimitExceeded
from slowapi.middleware import SlowAPIMiddleware

from routers import products, auth

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
def startup_event():
    init_db()

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
app.state.limiter = limiter
app.add_middleware(SlowAPIMiddleware)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
@app.exception_handler(RateLimitExceeded)
def rate_limit_handler(request: Request, exc: RateLimitExceeded):
    return JSONResponse(
        status_code=429,
        content={"detail": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôÖ‚Äç‚ôÇÔ∏è"},
    )

# –ü—Ä–æ–¥/–¥–µ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
IS_PROD = os.getenv("ENV") == "production"
ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS", "*").split(",")

# –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS –¥–ª—è Nuxt 3
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.include_router(products.router, prefix="/api")
app.include_router(auth.router, prefix="/api")

# –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î
@app.get("/ping_db")
def ping_db():
    return {"message": "Database connection successful!"}
